{"version":3,"file":"./lib/fxp.min.js","mappings":"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","sources":["webpack://fxp/./node_modules/strnum/strnum.js","webpack://fxp/./src/fxp.js","webpack://fxp/./src/util.js","webpack://fxp/./src/validator.js","webpack://fxp/./src/xmlbuilder/json2xml.js","webpack://fxp/./src/xmlbuilder/orderedJs2Xml.js","webpack://fxp/./src/xmlparser/DocTypeReader.js","webpack://fxp/./src/xmlparser/OptionsBuilder.js","webpack://fxp/./src/xmlparser/OrderedObjParser.js","webpack://fxp/./src/xmlparser/XMLParser.js","webpack://fxp/./src/xmlparser/node2json.js","webpack://fxp/./src/xmlparser/xmlNode.js","webpack://fxp/webpack/bootstrap","webpack://fxp/webpack/startup"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: []\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return (\n      this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' +\n      val +\n      tagEndExp    );\n  } else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  const textValue = this.replaceEntitiesValue(val);\n\n  if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else{\n    return (\n      this.indentate(level) + '<' + key + attrStr + '>' +\n       textValue +\n      '</' + key + this.tagEndChar  );\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            xmlStr += indentation + `<${tagName} ${tagObj[tagName][0][options.textNodeName]} ${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"amp\" : { regex: /&(amp|#38|#x26);/g, val : \"&\"},\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(!val) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n       \n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\" && xmlData[i+1] === \"/\"){ \n        const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n        let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n        if(closeTagName === tagName){\n          return {\n            tagContent: xmlData.substring(startIndex, i),\n            i : closeIndex\n          }\n        }\n        i=closeIndex;\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined) {\n        if(!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(316);\n"],"names":["hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","Object","assign","trimmedStr","trim","undefined","skipLike","test","match","exec","sign","numTrimmedByZeros","numStr","indexOf","replace","length","substr","num","search","validator","require","XMLParser","XMLBuilder","XMLValidator","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","keys","merge","target","a","arrayMode","len","i","getValue","isName","string","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","readAttributeStr","attrStr","startChar","tagClosed","value","validate","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","substring","result","attrStrStart","isValid","validateAttributeString","code","msg","line","otg","pop","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","Builder","this","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","replaceEntitiesValue","buildAttrPairStr","object","level","j2x","tagEndExp","piClosingChar","textValue","entity","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","Date","attr","newval","arrLen","j","item","Ks","L","arrToStr","arr","jPath","xmlStr","indentation","newJPath","tagObj","propName","tagStart","attr_to_str","tagValue","attStr","tagText","isStopNode","attrMap","attrVal","lastIndexOf","jArray","entityRegex","parseEntityExp","exp","regx","Error","hasBody","comment","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","child","entityName","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","shouldParse","OrderedObjParser","prettify","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","compress","text","compressedObj","newJpath","property","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","XmlNode","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}